**************************************************************************************************************
5.5.6-hotfix1 (2010/5/26)


--------------------------------------------------------------------------------------------------------------
ganga/python/GangaLHCb
--------------------------------------------------------------------------------------------------------------
A few minor bug fixes plus the following important changes in the Dirac backend:

Input sandbox LFN's:

The Dirac backend now has an inputSandboxLFNs attribute.  LFNs (or LogicalFile objects) can be
placed here if the user wants to add a logical file to the input sandbox.  What does this mean?  It
means the logical file will be downloaded into the input sandbox on the grid node.  E.g. if you add
'lfn:/some/lfn/file.txt' to inputSandboxLFNs, then file.txt will be downloaded into the work dir
(and visible w/ the name file.txt).  

An *important* point: these files don't count in the site matching so there's a very good chance
your job will run at a site that does *not* have this file.  Thus, Dirac will have to download the
file.  So don't do this for production data (which will be properly banned in the next version of
Dirac)!  This is meant for user files that are too big to put in the input sandbox...but don't abuse
it!  If you have 100 GB worth of ROOT files they should be in the input data (so that site matching
works).  If you have 200 MB worth of database info, then that can go in the inputSandboxLFNs.

Ability to change settings during resubmit:

The Dirac backend now also has a settings attribute.  The default value is {'CPUTime' : 172800}
(notice that CPUTime has been moved here; this has the consequence that the CPUTime setting in old
jobs is basically lost; it shouldn't really matter but be aware of it).  Any setting added here
places the following line into the DIRAC API job definition file:

# Ganga
j.backend.settings['Key'] = Value

# Dirac API job definition file
j.setKey(Value)

See the Dirac API documentation for a full list (but don't use a method unless you know what it
does!).  The ones likely to be used are:

Dirac method     | Ganga example                             | description
-----------------------------------------------------------------------------------------------j
setCPUTime       | settings['CPUTime'] = 1234567             | set CPUTime maximum 
setBannedSites   | settings['BannedSites'] = ['LCG.CERN.ch'] | ban CERN (or list of sites)
setDestination   | settings['Destination'] = 'LCG.CERN.ch'   | force job to run at CERN
setLogLevel      | settings['LogLevel'] = 'debug'            | change Dirac's verbosity

The "settings" attribute is respected whenever submit or resubmit is used...but can be edited at any
time (i.e. it is not write protected like most other Ganga settings).  So, you (the user) can put
the backend into an inconsistent state by editing it after the job is "completed".  This won't hurt
anything, but you could confuse yourself...so be careful.  

The reason (what you gain) for this is that now these settings can be changed when you resubmit the
job.  So, e.g. you want to simply rerun a job that failed at CERN and ban CERN.  In Ganga you can
now do:

j.backend.settings['BannedSites'] = ['LCG.CERN.ch']
j.resubmit()

You don't have to copy the job.

**************************************************************************************************************
