import os
import os.path
import shutil
import tempfile
from os.path import join
from GangaTest.Framework.tests import GangaGPITestCase, ICheckTest
from GangaTest.Framework.utils import file_contains, is_job_finished, \
     write_file

import Ganga.Utility.Config
config = Ganga.Utility.Config.getConfig('DIRAC')

class TestBender(GangaGPITestCase):

    def testLocal(self):
        j = Job(application=Bender(), backend=Local())        
        j.submit()
        assert j.application.script != [],\
               'Submit should assign defaults script file'
        return LocalJob(j)

    def testDirac(self):
        j = Job(application=Bender(), backend=Dirac())
        j.application.platform = config['AllowedPlatforms'][0]
        j.submit()
        return DiracJob(j)

    def testScripts(self):
        dir = tempfile.mkdtemp()
        name1 = join(dir,'script1.py')
        name2 = join(dir,'script2.py')
        write_file(name1,'print "ABC"\nexecfile("script2.py")\n')
        write_file(name2,'print "DEF"\n')        
        j = Job(application=Bender(), backend=Local())
        j.application.script=[name1,name2]
        j.submit()
        return ScriptJob(j)

    def testSplit(self):
        j = Job(application=Bender(), backend=Local())
        prefix='LFN:/lhcb/production/DC06/v1r0/00002069/DST/0000'
        j.inputdata = LHCbDataset([
            prefix+'/00002069_00000002_2.dst',
            prefix+'/00002069_00000004_2.dst'])
        j.splitter = SplitByFiles()
        j.submit()
        return SplitJob(j)


class LocalJob(ICheckTest):

    def isReadyForCheck(self):
        return is_job_finished(self.j)

    def checkTest(self):
        fname = join(self.j.outputdir,'stdout')
        print "fname = %s" % fname
        executionstring = 'Application Manager Configured successfully'
        assert file_contains(fname,executionstring),\
               'stdout should contain string: ' + executionstring


class DiracJob(ICheckTest):

    def isReadyForCheck(self):
        return True

    def checkTest(self):
        self.j.remove()
        pass

class ScriptJob(ICheckTest):

    def isReadyForCheck(self):
        return is_job_finished(self.j)

    def checkTest(self):
        fname = join(self.j.outputdir,'stdout')
        assert file_contains(fname,'ABC'), 'First script file not executed'
        assert file_contains(fname,'DEF'),\
               'Inclusion of second script not working'
        dir = os.path.split(self.j.application.script[0].name)[0]
        shutil.rmtree(dir)

class SplitJob(ICheckTest):

    def isReadyForCheck(self):
        return is_job_finished(self.j)

    def checkTest(self):
        executionstring = 'Application Manager Stopped successfully'
        for js in self.j.subjobs:
            fname = join(js.outputdir,'stdout')
            assert file_contains(fname,executionstring),\
                   'stdout should contain string: ' + executionstring


