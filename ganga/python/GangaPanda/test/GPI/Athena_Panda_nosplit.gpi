# testing structure for Athena application
# this test-case is CERN AFS dependent since it use setup files located in /afs/cern.ch/sw/ganga/external/test-externals/1.0/noarch/ATLAS 

from GangaTest.Framework.utils import sleep_until_completed,file_contains,write_file,sleep_until_state
import getpass,commands

joboption = '/tmp/ganga_athena_panda_testing_data-%s/AnalysisSkeleton_topOptions.py' % getpass.getuser()
archivefile = '/tmp/ganga_athena_panda_testing_data-%s/sources.817f2846-2111-4444-af06-9a8393ed5369.tar.gz' % getpass.getuser()
userareapath = '/tmp/ganga_athena_panda_testing_data-%s' % getpass.getuser()

config['TestingFramework']['timeout']=3600

j = Job()
j.application=Athena()
j.application.atlas_release='14.5.0'
j.application.option_file=[ joboption ]
j.application.user_area=archivefile
j.application.max_events=10
j.application.atlas_run_config = {'input': {}, 'other': {}, 'output': {'outAANT': [('AANTupleStream', 'AANT')]}}
j.application.atlas_run_dir = 'PhysicsAnalysis/AnalysisCommon/UserAnalysis/run/'
j.application.user_area_path = userareapath
j.inputdata=DQ2Dataset()
j.inputdata.dataset='fdr08_run2.0052283.physics_Muon.merge.AOD.o3_f8_m10'
j.inputdata.number_of_files=1
j.outputdata=DQ2OutputDataset()
j.outputdata.datasetname='testing.%s'%commands.getoutput('uuidgen')
j.backend=Panda()
j.backend.site = 'ANALY_BNL_ATLAS_1'
assert(j.submit()==True)

assert sleep_until_completed(j,3600)

# removing all jobs
j.remove()
