# top level splitting
j = Job()
j.backend=Local()
j.application=Executable()
j.splitter=ArgSplitter()
LEN = 10
j.splitter.args = [['ARGUMENT %d'%i] for i in range(LEN)]
j.application.exe='/bin/echo'

assert(not j.subjobs)
assert(len(j.subjobs) == 0)

# split master
rjobs = j.splitter._impl.validatedSplit(j._impl)
j._impl.subjobs = rjobs
LN = len(rjobs)

repository = j._impl._getRegistry().repository

# check registration
repository.registerJobs(j._impl.subjobs, masterJob = j._impl)
for s in j.subjobs:
    assert(s.master is j)
    assert(s.id != None)

# check ci/co
#repository.commitJobs([j._impl])
mid = j.id
j = repository.checkoutJobs([mid])[0]
assert(len(j.subjobs) == LN)
assert(j.application.exe == '/bin/echo')

# another ci/co check
j.subjobs[1].application.exe = '/bin/ls'
j.application.exe = '/bin/pwd'    
repository.commitJobs([j])
j = repository.checkoutJobs([mid])[0]

assert(j.subjobs[1].application.exe == '/bin/ls')
assert(j.application.exe == '/bin/pwd')

sj=map(lambda x: x.id,j.subjobs)
# check set status
status_list = [((mid,sj[0] ),'running'),((mid, sj[1]),'running'), ((mid, sj[2]),'running')]
repository.setJobsStatus(status_list)

# check get status
md = repository.getJobsStatus(map(lambda x: x[0], status_list))
for i in range(len(md)):
    assert (md[i][0] == status_list[i][0])
    assert (md[i][1] == status_list[i][1])

# check getting job status in another way
ttt = {'table_path':repository._getSubJobPath((mid,)), 'attributes':{}}
md = repository.getJobsStatus(ttt)
for i in range(len(status_list)):
    if md[i][0] == status_list[i][0]:
        assert (md[i][1] == status_list[i][1])   

