#second level splitting
j = Job()
j.backend=Local()
j.application=Executable()
j.splitter=ArgSplitter()
LEN = 10
j.splitter.args = [['ARGUMENT %d'%i] for i in range(LEN)]
j.application.exe='/bin/echo'

assert(not j.subjobs)
assert(len(j.subjobs) == 0)

# split master
rjobs = j.splitter._impl.validatedSplit(j._impl)
j._impl.subjobs = rjobs
LN = len(rjobs)

repository = j._impl._getRegistry().repository

# check registration
repository.registerJobs(j._impl.subjobs, masterJob = j._impl)
for s in j.subjobs:
    assert(s.master is j)
    assert(s.id != None)

# check ci/co
#repository.commitJobs([j._impl])
mid = j.id
j = repository.checkoutJobs([mid])[0]
assert(len(j.subjobs) == LN)

j1 = j.subjobs[1]
#j1._data['splitter']=ExeSplitter()._impl #???
j1.splitter = ArgSplitter()._impl
LEN = 5
j1.splitter.args =[['%d'%i] for i in range(LEN)]
j1.application.exe='/bin/ls'

assert(not j1.subjobs)
assert(len(j1.subjobs) == 0)

# split j1
rjobs1 = j1.splitter.validatedSplit(j1)
j1.subjobs = rjobs1
LN1 = len(rjobs1)

# check registration
repository.registerJobs(j1.subjobs, masterJob = j1)
for s in j1.subjobs:
    assert(s.master is j1)
    assert(s.id != None)

# check ci/co
#repository.commitJobs([j1])
mid1 = j1.id
j1 = repository.checkoutJobs([(mid, mid1)])[0]
assert(len(j1.subjobs) == LN1)
