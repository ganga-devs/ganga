#!/usr/bin/env python

import os
import os.path
import sys
import time
import re
import shutil
import argparse
import glob

parser = argparse.ArgumentParser(description='interactive release making tool')
parser.add_argument('version', help='Release version')
args = parser.parse_args()

version = args.version

CONFIG = {}
CONFIG['top'] = '/afs/cern.ch/sw/ganga'

CONFIG['version'] = version
CONFIG['version-pre'] = version + '-pre'
CONFIG['prereldir'] = os.path.join(CONFIG['top'], 'install', CONFIG['version-pre'])
CONFIG['reldir'] = os.path.join(CONFIG['top'], 'install', CONFIG['version'])
CONFIG['installdir'] = os.path.join(CONFIG['top'], 'install')
CONFIG['toolsdir'] = os.path.dirname(os.path.realpath(__file__))

CONFIG['webdir_top'] = os.path.join(CONFIG['top'], 'www')
CONFIG['tagsdir_top'] = os.path.join(CONFIG['webdir_top'], 'developers', 'tags')
CONFIG['tagsdir'] = os.path.join(CONFIG['top'], 'www', 'developers', 'tags', 'data', CONFIG['version'])

CONFIG['releasenotesdir'] = os.path.join(CONFIG['toolsdir'], '..')

CONFIG['tag'] = "Ganga-" + version.replace('.', '-')

# accounts used for CERN deployment of Ganga
GANGA_ACCOUNTS = [('Ganga', 'gangage'), ('GangaLHCb', 'gangalb'), ('GangaAtlas', 'gangaat')]

# running tests on different accounts
GANGA_ACCOUNT_TEST = [('gangage', 'test_ganga_generic'), ('gangaat', 'test_ganga_atlas'), ('gangalb', 'test_ganga_lhcb')]

# generation manuals
GANGA_ACCOUNT_MANUAL = {'gangage': 'generate_generic_manual', 'gangaat': 'generate_atlas_manual', 'gangalb': 'generate_lhcb_manual'}


def ask_yes_no(msg):
    answer = raw_input(msg + ' [yes/NO] ')

    if answer.upper() == 'YES':
        return True

    return False


def acmd(cmdpath, ignore_errors=False):
    print 'doing:', cmdpath
    print
    if os.system(cmdpath):
        if not ignore_errors:
            print "problem with executing: ", cmdpath
            sys.exit(1)


def toolcmd(cmd):
    if CONFIG['toolsdir']:
        cmdpath = "%s/%s" % (CONFIG['toolsdir'], cmd)
    else:
        cmdpath = cmd
    acmd(cmdpath)


def remove_prerelease(prerelease_dir):

    acmd('rm -rf %s ' % prerelease_dir)

    prerel_basename = os.path.basename(prerelease_dir)

    # remove the tarball also
    pre_tarball = '%s/tarball/Ganga-%s.tar.gz' % (CONFIG['top'], prerel_basename)
    try:
        os.unlink(pre_tarball)
        print 'sucessfully removed pre-release tarball %s' % pre_tarball
    except OSError as e:
        print 'Cannot delete pre-release tarball: %s' % str(e)  


def get_count_releases(install_dir):

    current_dir = os.getcwd()

    os.chdir(install_dir)

    def is_release(x):
        return x[1] == '.' and x[3] == '.'

    dirs = [d for d in os.listdir(install_dir) if is_release(d)]

    os.chdir(current_dir)

    return len(dirs)


def remove_oldest_prereleases(install_dir):

    current_dir = os.getcwd()

    os.chdir(install_dir)

    dirs = (d for d in os.listdir(install_dir) if '-pre' in d)
    dirs = [os.path.join(install_dir, d) for d in dirs]  # add path to each dir
    dirs.sort(lambda x, y: cmp(os.path.getmtime(x), os.path.getmtime(y)))

    num_prereleases = len(dirs)

    if num_prereleases == 0:
        os.chdir(current_dir)
        return False

    elif num_prereleases == 1:
        print 'Removing oldest prereleases to free space in the install directory' 

        remove_prerelease(dirs[0])

    else:
        print 'Removing oldest prereleases to free space in the install directory'

        remove_prerelease(dirs[0])
        remove_prerelease(dirs[1])

    os.chdir(current_dir)
    return True


def get_rel_manager_email():

    with open('%(tagsdir_top)s/release_manager.php' % CONFIG, 'r') as f:
        content = f.read()
        content = content.strip()

    left_index = content.find('"')
    right_index = content.rfind('"')

    rel_manager_email = content[left_index + 1:right_index]

    return rel_manager_email


def wait_all_tests_to_finish(outputdir):

    start_time = int(time.time())

    latest_dir = os.path.dirname(outputdir)

    files_to_search = [pkg + '.test.ALL__localxml.xml' for pkg in ['Ganga', 'GangaAtlas', 'GangaLHCb', 'GangaPanda', 'GangaRobot']]

    current_dir = os.getcwd()

    os.chdir(latest_dir)

    while True:

        files = filter(os.path.isfile, os.listdir(latest_dir))

        matching_files = []

        for f in files:

            full_file_name = os.path.join(latest_dir, f)

            # if it is one of the files we search and is a new file
            if f in files_to_search and os.path.getmtime(full_file_name) > start_time:

                matching_files.append(f)

        if len(matching_files) == len(files_to_search):
            break

        time.sleep(60)

    rel_manager_email = get_rel_manager_email()

    os.chdir(current_dir)

    send_mail('testsfinished', receiver=rel_manager_email)

    print 'Email sent to release manager'


def send_mail(key, receiver=''):
    import smtplib
    import email

    release_tools_dir = os.path.dirname(os.path.abspath(__file__))

    sender = 'project-ganga-developers@cern.ch'
    receivers = ''
    email_file = ''
    subject = ''

    if key == 'prerelease':

        email_file = os.path.join(release_tools_dir, 'release_tool_emails/prerelease.txt')
        receivers = 'project-ganga-developers@cern.ch'
        subject = 'Ganga %s-pre is ready' % CONFIG['version']

    elif key == 'release':

        email_file = os.path.join(release_tools_dir, 'release_tool_emails/release.txt')
        receivers = 'project-ganga-developers@cern.ch;project-ganga@cern.ch'
        subject = 'Ganga release %s is ready' % CONFIG['version']
   
    elif key == 'testsfinished':

        email_file = os.path.join(release_tools_dir, 'release_tool_emails/testsfinished.txt')
        receivers = receiver
        subject = 'Ganga tests for %s-pre are finished' % CONFIG['version']
        
    elif key == 'testreports':

        email_file = os.path.join(release_tools_dir, 'release_tool_emails/testreports.txt')
        receivers = 'project-ganga-developers@cern.ch'
        subject = 'Ganga %s-pre test reports are ready' % CONFIG['version']

    with open(email_file, 'rb') as fp:
        msg_string = fp.read()

    msg = email.message_from_string(msg_string)

    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = receivers

    string_message = msg.as_string()
        
    if key == 'prerelease' or key == 'testreports':
        string_message = string_message.replace('VER', CONFIG['version'])
    elif key == 'release':
        string_message = string_message.replace('*version*', CONFIG['version'])
    elif key == 'testsfinished':
        string_message = string_message.replace('VER', CONFIG['version'])

    try:
        smtp_obj = smtplib.SMTP('cernmx.cern.ch')
        smtp_obj.sendmail(sender, receivers, string_message)

    except smtplib.SMTPException:
        print "Can not send %s notification email" % key

def startrelease_command():
    """START: start the release process"""

    toolcmd('ganga-git-start-release %(version)s' % CONFIG)

    #print 'the prerelease is installed in', CONFIG['prereldir']

def prerelease_command():
    """PRE: create the PRE-RELEASE in the prereldir"""
    if os.path.isdir(CONFIG['prereldir']):
        print 'the current prerelease is %(prereldir)s' % CONFIG
        prm = re.compile('(\S)+-pre(?P<num>\d+)')
        maxnum = 0
        for pre_rel in glob.glob(CONFIG['prereldir'] + '*'):
            print 'prelease found:', pre_rel
            r = prm.match(os.path.split(pre_rel)[-1])
            if r:
                maxnum = max(maxnum, int(r.group('num')))
        maxnum += 1
        new_backup_prerelease = CONFIG['prereldir'] + str(maxnum)
        if ask_yes_no('do you want to delete the current prerelease (and back it up as %s)?' % new_backup_prerelease):
            acmd('mv %s %s' % (CONFIG['prereldir'], new_backup_prerelease))
            print 'sucessfully moved %s to %s' % (CONFIG['prereldir'], new_backup_prerelease)
            pre_tarball = '%(top)s/tarball/Ganga-%(version-pre)s.tar.gz' % CONFIG
            try:
                os.unlink(pre_tarball)
                print 'sucessfully removed pre-release tarball %s' % pre_tarball
            except OSError as e:
                print 'Cannot delete pre-release tarball: %s' % str(e)
        else:
            print "Cannot continue...Terminating"
            return

    # if there are a lot of releases we should clean some disk space
    if get_count_releases(CONFIG['installdir']) > 199:
        if not remove_oldest_prereleases(CONFIG['installdir']):
            print "There is not enough disk space for creation of the prerelease, please remove some of the oldest releases in %s" % CONFIG['installdir']
            return

    print 'Making pre-release tarballs (forcing recreation).'

    toolcmd('ganga-git-create-pre %(version)s' % CONFIG)

    print 'the prerelease is installed in', CONFIG['prereldir']

    toolcmd('ganga-release-html %(version)s %(prereldir)s'%CONFIG)

    versionfile = os.path.join(CONFIG['webdir_top'], 'download', 'VERSIONS.txt')
    print 'Updating file with available releases'
    acmd("touch %s && date +'%s - %%d %%b %%Y %%k:%%m:%%S' >> %s" % (versionfile, CONFIG['version-pre'], versionfile))

    if ask_yes_no('Do you want to send email to Ganga developers list that the prerelease is ready?'):
        send_mail('prerelease')


def pretest_command():
    """TEST: run the test suite in the pre-release prereldir"""
    if not os.path.isdir(CONFIG['prereldir']):
        print "can't find the prerelease in ", CONFIG['prereldir']
        return

    outputdir = '%(prereldir)s/reports/latest/output' % CONFIG

    try:
        os.makedirs(outputdir)
    except Exception as e:
        print 'WARNING: ', str(e)

    for account, test_name in GANGA_ACCOUNT_TEST:
        print '*' * 40
        print 'Login to %s@lxplus and run : sh ~/test/%s.sh %s' % (account, test_name, version.replace('.', ' '))

    print '*' * 40
    print "Now wait for tests to complete, a notification email will be sent to the release manager when all tests are finished."

    wait_all_tests_to_finish(outputdir)


def test_report_command():
    """TEST REPORT: Create the summary web pages with the test results."""

    print "Creating web pages."
    acmd("%(prereldir)s/bin/ganga --test -o\'[TestingFramework]ReleaseTesting=True\' -o\'EnableHTMLReporter=True\' -o\'EnableTestRunner=False\'" % CONFIG)

    if ask_yes_no('Do you want to send email to Ganga developers list that test reports are ready?'):
        send_mail('testreports')


def release_command():
    """RELEASE: make a release based on a previously created GLOBAL TAG and create the distribution kits"""
    if os.path.isdir(CONFIG['reldir']):
        print 'release already exists in', CONFIG['reldir']
        return

    # if there are a lot of releases we should clean some disk space
    if get_count_releases(CONFIG['installdir']) > 199:
        if not remove_oldest_prereleases(CONFIG['installdir']):
            print "There is not enough disk space for creation of the prerelease, please remove some of the oldest releases in %s" % CONFIG['installdir']
            return

    print 'Updating version number'

    toolcmd('ganga-git-set-version %(version)s' % CONFIG)

    print 'Making installation tarballs'

    toolcmd('ganga-git-create-final %(version)s' % CONFIG)

    print 'Byte-compiling sources'

    toolcmd('prepdist %(reldir)s compile' % CONFIG)

    print 'Copying all reports from the pre-release area'

    acmd('cp -r %(prereldir)s/reports %(reldir)s' % CONFIG)

    print 'Regenerating reports'

    toolcmd('ganga-release-html %(version)s %(reldir)s' % CONFIG)

    print 'Cleaning any junk left by report generation scripts'

    toolcmd('prepdist %(reldir)s clean' % CONFIG)

    # print 'Fix the coverage report symlink'

    # acmd('ln -s ../latest/html/coverage %(reldir)s/reports/html/coverage' % CONFIG)

    print 'Protecting the release area'

    toolcmd('acl protect %(reldir)s' % CONFIG)

    print 'Protecting the tags dir'
    _protect_tags_dir()

    print 'Updating web pages'
    _update_web_pages()

    print 'Release sucesfully made in the %(reldir)s' % CONFIG

    if ask_yes_no('Do you want to send email to Ganga developers and Ganga project lists that the release is ready?'):
        send_mail('release')


def _protect_tags_dir():
    """
    write protect the tags directory
    """
    toolcmd('acl protect %(tagsdir)s' % CONFIG)

    with open('%(tagsdir_top)s/open_releases' % CONFIG, 'r') as fh:
        next_releases = [line.strip() for line in fh.readlines() if line.strip() != CONFIG['version']]

    with open('%(tagsdir_top)s/open_releases' % CONFIG, 'w') as fh:
        fh.writelines([release + '\n' for release in next_releases])


def _update_web_pages():
    """
    For each file (e.g mypage.html) that needs to be updated automatically at release time
    one should write a template file (.tpl extension) for it (i.e. mypage.html.tpl)
    Current keywords:
        <:GANGA_VERSION:> : the latest production release
        <:GANGA_DATE:>    : the release date of the latest vrsion
        <:GANGA_ALL_VERSIONS:>: comma separated list of all existing versions of Ganga in release area
    """
    import urllib
    # we do not expose development releases to public
    if any(x in CONFIG['version'] for x in ['beta', 'alpha', 'pre']):
        print 'DEVELOPMENT release detected. The web pages/NEWS are not generated!'
        return

    # the list of directories in web area to search for templates
    dirs = ['%(webdir_top)s/user/' % CONFIG,
            '%(webdir_top)s/download/' % CONFIG,
            '%(webdir_top)s/include/' % CONFIG,
            '%(webdir_top)s/rss/' % CONFIG,
            '%(webdir_top)s/developers/tags' % CONFIG,
            '%(installdir)s' % CONFIG
           ]

    # get production releases from ganga_setup
    import ganga_setup
    p, a = ganga_setup.get_versions(CONFIG['installdir'])
    public_vers_str = ",".join(['"%s"' % r for r in p])
    dev_vers_str = ",".join(['"%s"' % r for r in a if r not in p])
    # replacements dictionary : KEYWORD -> (REPLACEMENT, append?)
    # append : False - replace the KEYWORD in the destination file
    #        : True  - replace the KEYWORD in the template file and add a new KEYWORD before the replacement and then copy the template to destination file
    # CONFIG['release_date'] = time.strftime('%d %B %Y',time.gmtime())
    CONFIG['release_date'] = time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.gmtime())
    clean_guid = urllib.quote('release-' + str(CONFIG['version']) + '-' + time.strftime('%s', time.gmtime()))
    replacements = {'<!--GANGA_VERSION-->'     : (CONFIG['version'], False),
                    '<!--GANGA_DATE-->'        : (CONFIG['release_date'], False),
                    '<!--GANGA_PUB_VERSIONS-->': (public_vers_str, False),
                    '<!--GANGA_DEV_VERSIONS-->': (dev_vers_str, False),
                    '<!--GANGA_RSS_ALERT-->'   : ("<item>"
                                                  "<title>Ganga %(version)s is available</title>"
                                                  "<description>%(release_date)s: public release %(version)s is available ! Check the release page for further information.</description>"
                                                  "<link>http://ganga.web.cern.ch/ganga/release/%(version)s/reports/html/Release.html</link>"
                                                  "<pubDate>%(release_date)s</pubDate>"
                                                  "<guid isPermaLink='false'>" % CONFIG + clean_guid + "</guid>"
                                                  "<author>project-ganga@cern.ch (Ganga Mailing List)</author>"
                                                  "</item>", True)
                    }

    templates = []
    for d in dirs:
        templates.extend(glob.glob('%s/*.tpl' % d))

    # replace the keywords in .tpl files:
    for template in templates:
        newfile = os.path.splitext(template)[0]
        try:
            print 'Writting %s ' % newfile
            tf = file(template, 'r')
            ntf = file('%s.new' % template, 'w')
            nf = file(newfile, 'w')
            try:
                for line in tf:
                    # keep a copy to generate new template line
                    tline = line
                    for keyword in replacements:
                        repl, append = replacements[keyword]
                        # replace the keyword
                        line = line.replace(keyword, repl)
                        # replace the keyword but keep the keyword in template file
                        # (in this way we keep reaplacing this keyword next time we regenerate)
                        if append:
                            tline = tline.replace(keyword, '%s %s' % (keyword, repl))
                    nf.write(line)
                    ntf.write(tline)
            finally:
                tf.close()
                ntf.close()
                nf.close()
            # replace the template file (it might be modified by append rules before)
            shutil.move('%s.new' % template, template)
        except Exception as e:
            print 'Warning! Cannot write %s. %s' % (newfile, str(e))


def generate_manuals():
    """GENERATE LHCB MANUAL: generate LHCb reference manuals"""

    for x in GANGA_ACCOUNTS:
        if not x[0] in ['GangaLHCb']:
            continue

        print 'login to %s@lxplus and run this command:' % x[1]
        print 'sh ~/test/%s.sh %s' % (GANGA_ACCOUNT_MANUAL[x[1]], version.replace('.', ' '))
        print

    raw_input("When you have executed the command, press Enter to continue ...")


def change_release_manager():
    """CHANGE RELEASE MANAGER: change the email address of the release manager"""
    current_release_mgr = raw_input('Enter release manager email or just ENTER to keep the current release manager email:')
    if current_release_mgr:
        with open('%(tagsdir_top)s/release_manager.php' % CONFIG, 'w') as fh:
            fh.write('<?php $release_manager_email="' + current_release_mgr + '";?>')


def quit_command():
    """Quit"""
    sys.exit(0)


def show_config():
    """Show current configuration"""
    print "CONFIGURATION:"
    for c in CONFIG:
        print "  %-10s = %s" % (c, CONFIG[c])


def _setlib():
    """
    Add the script directory to python path
    """
    libdir = os.path.normpath(os.path.dirname(__file__))
    if libdir not in sys.path:
        sys.path.insert(0, libdir)

_setlib()

commands = [show_config, startrelease_command, prerelease_command, pretest_command, test_report_command, release_command, generate_manuals, change_release_manager, quit_command]

show_config()

while True:
    print
    print "COMMANDS:"
    for i, command in enumerate(commands):
        print "  %d   - %s" % (i, command.__doc__)
    print
    choice = raw_input('Enter your choice: ')
    commands[int(choice)]()
