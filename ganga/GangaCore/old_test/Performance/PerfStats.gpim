import os,new,types
from GangaTest.Framework.tests import MultipassTest

from Ganga.Utility.logging import getLogger
logger = getLogger(modulename=True)

class PerfStats(MultipassTest):
    """
    This is the Ganga testcase used by the testing framework
    The test methods are dynamically added to PerfStats
    At the beggining it is just an empty class.
    """
    def __init__(self):
        MultipassTest.__init__(self, len(jobsc)*2)
    
    def setUp(self):    
        MultipassTest.tearDown(self)
        with open ( '%s.stats' % os.environ['OUTPUT_PATH'], 'w' ) as fileHandle:
            fileHandle.write('# repository performance results (Ganga startup time, Repository job registration&commit)')

    def tearDown(self):
        from Ganga.GPI import jobs
        for j in jobs:
            try:
                j.remove()
            except:
                pass

class TestBase(object):
    """
    TestBase that defines two steps used to measure the ganga job loading/creation/commit performance:
     - step1:
    * measure the Ganga startup time with X jobs in repository
     - step2:
        * measure the average time to register and modify a job in Ganga (when repository has N jobs)
    """
    def __init__(self, jobsCount):
        self.jobsCount = jobsCount

    def testStartupTime(self):
        import Ganga,time
        logger.info("starting testStartupTime %s" % self.jobsCount)
        st = time.time() - Ganga.Runtime._prog.start_time    
        with open ( '%s.stats' % os.environ['OUTPUT_PATH'], 'a' ) as fileHandle:
            line = "repository size: %d start-time: %f sec.\n" % (len(jobs),st)
            fileHandle.write(line)
            logger.info(line)

    def testJobRegistration(self):
        logger.info("starting testJobRegistration %s" % self.jobsCount)
        def create_job(modify=True):
            j = Job()
            if modify:
                j.name = 'modified'
            return j
    
        import time
        t0=time.time()
       
        j = create_job()
        start_id = j.id
    
        for i in range(self.jobsCount-1):        
            j = create_job()
       
        stop_id = j.id
        elapsed = time.time()-t0
        size = len(jobs)
       
        #stats.append(float(elapsed)/float(self.jobsCount))
        line = 'jobs: %d repository size: %d  %.1f sec., %.1f sec./job\n' % (self.jobsCount,size,elapsed,float(elapsed)/float(self.jobsCount))
        with open ( '%s.stats' % os.environ['OUTPUT_PATH'], 'a' ) as fileHandle:
            fileHandle.write(line)
        logger.info(line)

    def testTearDown(self):

        from Ganga.GPI import jobs

        for j in jobs:
            try:
                j.remove()
            except:
                pass


# This code is called by the testing framework outside of Ganga when this module is loaded
# Add the tests to the test container (TestExample)
# Note that this code is not loaded within a Ganga session, so we don't have access to the GPI namespace here,
def addTests(test_container, testinstance, step):
    import new    
    passno = 2*step+1
    
    method = new.instancemethod(lambda self: getattr(testinstance,'testJobRegistration')(),None,test_container)
    method_name="pass%s" % passno
    setattr(test_container, method_name, method)
    
    method = new.instancemethod(lambda self: getattr(testinstance,'testStartupTime')(),None,test_container)
    method_name="pass%s" % (passno+1)
    setattr(test_container, method_name, method)

jobsc=[10,100,500,1000,1000,2000]
for i in range(0,len(jobsc)):
    testcase = TestBase(jobsc[i])
    addTests(PerfStats, testcase, i)


