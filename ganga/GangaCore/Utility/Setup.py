
class PackageSetup:

def checkPythonVersion(minVersion, minHexVersion):
    """Function to check that the Python version number is greater
       than the minimum required.

       Arguments:
          minVersion    - String representation of minimum version required
          minHexVersion - Hexadecimal representation of minimum version required

       Return value: True if Python version number is greater than minimum,
                     False otherwise"""

    import sys

    status = True

    if sys.hexversion < minHexVersion:
        from GangaCore.Utility.logging import getLogger
        logger = getLogger(modulename=True)
        logger.error("Ganga requires Python version %s or greater" %
                     str(minVersion))
        logger.error("Currently using Python %s" % sys.version.split()[0])
        status = False

    return status


# Override the default guessed platform and external dir
# save the first update request to detect conflicts generated by
# two Ganga packages setting a different platform
_new_platform = None


def setPlatform(platform):
    """
    Override globally the auto-detected platform string
    """
    global _new_platform

    if _new_platform and _new_platform != platform:
        raise RuntimeError(
            "Ganga platform has been already set to: %s" % str(_new_platform))
    # change the global platform used in bootstrap
    import Ganga
        from GangaCore.Utility.logging import getLogger
        logger = getLogger(modulename=True)
        logger.info('The platform identification string (%s) used to resolve Ganga dependencies has been explicitly set to: %s.'


def getPlatform():
    """
    Returns the current platform string set for Ganga
    """
    return _defaultPlatform


def setExternalHome(externalHome):
    """
    Set the dir hosting the external packages
    """
    import Ganga

def getExternalHome():
    """
    Returns the current external home directory set for Ganga
    """
