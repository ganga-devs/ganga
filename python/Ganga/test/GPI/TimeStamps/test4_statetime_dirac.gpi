from GangaTest.Framework.utils import sleep_until_state

import datetime

j = Job()

j.backend='Dirac'
j.backend.CPUTime=60

j.submit()

assert sleep_until_state(j, 500, 'completed')

assert j.time.submitted() == j.time.timestamps['submitted']
assert type(j.time.submitted()) == datetime.datetime

print "Job 1/6 done."

j_comp = Job()

j_comp.backend='Dirac'
j_comp.backend.CPUTime=60

j_comp.submit()

j_comp.kill()

j_comp.resubmit()

assert sleep_until_state(j_comp, 120, 'completed'), "Job: %d " %j_comp.id

assert type(j_comp.time.new()) == datetime.datetime
assert type(j_comp.time.submitting()) == datetime.datetime
assert type(j_comp.time.timestamps['resubmitted']) == datetime.datetime
assert type(j_comp.time.backend_running()) == datetime.datetime
assert type(j_comp.time.backend_final()) == datetime.datetime
assert type(j_comp.time.final()) == datetime.datetime


print "Job 2/6 done"
        
j_fail = Job()

j_fail.backend='Dirac'
j_fail.backend.CPUTime=60

j_fail.submit()

assert sleep_until_state(j_fail.subjobs, 500, 'completing'), "Job: %d " %j_fail.id

j_fail.force_status('failed')

assert sleep_until_state(j_fail, 500, 'failed'), "Job: %d " %j_fail.id

assert type(j_fail.time.new()) == datetime.datetime
assert type(j_fail.time.submitting()) == datetime.datetime
assert type(j_fail.time.submitted()) == datetime.datetime
assert type(j_fail.time.backend_running()) == datetime.datetime
assert type(j_fail.time.final()) == datetime.datetime

print "Job 3/6 done"

#subjobs

j = Job()

j.splitter='ArgSplitter'
j.splitter.args=[[],[],[]]

j.backend='Dirac'
j.backend.CPUTime=60

j.submit()

assert sleep_until_state(j, 500, 'completed'), "Job: %d " %j.id

assert j.time.submitted() == j.time.timestamps['submitted']
assert type(j.time.submitted()) == datetime.datetime

print "Job 4/6 done."

j_comp = Job()

j_comp.backend='Dirac'
j_comp.backend.CPUTime=60

j_comp.splitter='ArgSplitter'
j_comp.splitter.args=[[],[],[]]

j_comp.submit()

j_comp.kill()

j_comp.resubmit()

assert sleep_until_state(j_comp, 120, 'completed'), "Job: %d " %j_comp.id

assert type(j_comp.time.new()) == datetime.datetime
assert type(j_comp.time.submitting()) == datetime.datetime
assert type(j_comp.time.timestamps['resubmitted']) == datetime.datetime
assert type(j_comp.time.backend_running()) == datetime.datetime
assert type(j_comp.time.backend_final()) == datetime.datetime
assert type(j_comp.time.final()) == datetime.datetime

print "Job 5/6 done"
        
j_fail = Job()

j_fail.backend='Dirac'
j_fail.backend.CPUTime=60

j_fail.splitter='ArgSplitter'
j_fail.splitter.args=[[],[],[]]

j_fail.application.exe='sleep'

j_fail.application.args='60'

j_fail.submit()

assert sleep_until_state(j_fail, 500, 'running'), "Job: %d " %j_fail.id

j_fail.force_status('failed')

assert sleep_until_state(j_fail, 500, 'failed'), "Job: %d " %j_fail.id

assert type(j_fail.time.new()) == datetime.datetime
assert type(j_fail.time.submitting()) == datetime.datetime
assert type(j_fail.time.submitted()) == datetime.datetime
assert type(j_fail.time.backend_running()) == datetime.datetime
assert type(j_fail.time.final()) == datetime.datetime

print "Job 6/6 done"

#end

print "Test4_statetime_dirac passed."


