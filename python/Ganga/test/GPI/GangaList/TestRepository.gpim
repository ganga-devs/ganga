from Ganga.GPIDev.Base.Proxy import addProxy,getProxyAttr,isProxy,isType
from Ganga.GPIDev.Lib.GangaList.GangaList import GangaList as gangaList
from GangaTest.Framework.tests import MultipassTest
import os
import pickle
import random
import string
import tempfile

class TestRepository(MultipassTest):

    def __init__(self):
        
        #not sure if I need to do this
        count = 0
        for m in dir(self):
            if m.startswith('pass'): count += 1
        MultipassTest.__init__(self,count)
        
        tmp_dir = os.path.dirname(tempfile.mktemp())
        self.fileName = os.path.join(tmp_dir,'numberStore.p')
        
    def _makeRandomString(self):
        str_len = random.randint(3,10)
        s = ''
        for _ in range(str_len):
            s += random.choice(string.ascii_letters)
        return s
            
    def _makeRandomTFile(self):
        name = self._makeRandomString()
        subdir = self._makeRandomString()
        return TFile(name = name, subdir = subdir)    
    
    
    def pass1(self):
        """ First pass of this test"""
        
        j = Job(application = GListApp(gListComp = [self._makeRandomTFile() for _ in range(10)],\
                                                   gList = [self._makeRandomString() for _ in range(10)],\
                                                   seq = range(10)),\
                                                   backend = TestSubmitter())
        assert isProxy(j.application.gList)
        assert isType(j.application.gList, gangaList)
        assert j.application.gList._impl._getParent(), 'Parent must be set'
        
        #make sure we have out job in the repository
        job_seen = False
        for jj in jobs:
            if j is jj:
                job_seen = True
                break
            
        assert job_seen, 'Job must be in the repository'
        pickle.dump(str(j.id),open(self.fileName,'w'))

    def pass2(self):
        """ Second pass of this multipass test"""

        id = int(pickle.load(open(self.fileName)))
        j = jobs(id)
        
        assert j, 'job should not be null'
        
        assert isProxy(j.application.gList)
        assert isType(j.application.gList, gangaList)
        assert j.application.gList._impl._getParent(), 'Parent must be set'
        
        #make sure mutable methods are committed
        print "extend..."
        j.application.gList.extend([self._makeRandomString() for _ in range(10)])
        print "extended!"
        
        pickle.dump(((j.id),len(j.application.gList)),open(self.fileName,'w'))
        
    def pass3(self):
        
        (id,list_len) = pickle.load(open(self.fileName))
        j = jobs(id)
        assert j, 'Job should be found'
        
        assert len(j.application.gList) == list_len, 'Extended list not committed'
        
        #make sure mutable methods are committed
        j.application.gList.append(self._makeRandomString())
        pickle.dump(((j.id),len(j.application.gList)),open(self.fileName,'w'))
        
    def pass4(self):
        
        (id,list_len) = pickle.load(open(self.fileName))
        j = jobs(id)
        assert j, 'Job should be found'
        
        assert len(j.application.gList) == list_len, 'Appended list not committed'
        
    
        
        
