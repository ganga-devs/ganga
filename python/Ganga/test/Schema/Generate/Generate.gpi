import sys
from Ganga.Utility.Plugin import allPlugins
from Ganga.Utility.logging import getLogger
from Ganga.Utility.Config import getConfig, setConfigOption
from Ganga.Core.GangaRepository import getRegistry

logger = getLogger()

##We have to determine the Ganga version this way because the PRE always thinks config['System']['GANGA_VERSION'] is GANGA-SVN
this_version=getConfig('System')['GANGA_PYTHONPATH'].split('/')[6]
this_repo=getConfig('Configuration')['gangadir']

logger.error('#################### RUNNING JOB GENERATOR')
logger.error('#################### Executing Ganga version: ' + this_version)
logger.error('#################### Creating repo at: ' + this_repo)

baks = allPlugins.allCategories()['backends']
apps = allPlugins.allCategories()['applications']

totnumjobs = 0
#Create an Executable job for each of the available backends
for bak in baks:
    appname = 'Executable'
    new_name = str(this_version + "_" + bak + "_" +  appname)

    if len(jobs.select(name=new_name)) == 0:
        j=Job(backend=bak)
        j.name = new_name
        totnumjobs += 1
        logger.error("Creating Job(backend='"+bak+"', application='"+appname+"')")
    else:
        logger.error("Already Existed: Job(backend='"+bak+"', application='"+appname+"')")

#Create one job (targetting the local backend) for each of the available Applications except Gaudi
#The checks below will prevent creation of the Executable:Local job, as it was done already above
for app in apps:
    if not app == 'Gaudi':
        bakname = 'Local'
        new_name = str(this_version + "_" + bakname + "_" +  app)
        if len(jobs.select(name=new_name)) == 0:
            j=Job(application=app)
            j.name = new_name
            totnumjobs += 1
            logger.error("Creating Job(backend='"+bakname+"', application='"+app+"')")
        else:
            logger.error("Already Existed: Job(backend='"+bakname+"', application='"+app+"')")

logger.error('total number of jobs')
logger.error(totnumjobs)

if totnumjobs > 0:
    assert totnumjobs == len(jobs), 'We failed to create the correct number of test jobs. %i created' % (totnumjobs)
else:
    logger.warning("We didn't create any test jobs; perhaps they all existed already?")
    logger.warning("There are %i jobs in the repository" % (len(jobs)))
    





