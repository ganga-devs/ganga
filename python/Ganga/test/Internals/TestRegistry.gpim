import os, getpass, random, threading, time
from GangaTest.Framework.tests import GangaGPITestCase, ICheckTest, MultipassTest
from Ganga.Core.GangaRepository.GangaRepositoryXML import GangaRepositoryLocal
from GangaTest.Lib.TestObjects import TestGangaObject
from Ganga.Core.GangaRepository.Registry import makeRepository, Registry
from Ganga.Core.GangaRepository import RegistryLockError
import sys

import Ganga.Utility.Config
config = Ganga.Utility.Config.getConfig('Configuration')
from Ganga.Runtime.Repository_runtime import getLocalRoot
location = getLocalRoot()
type = config['repositorytype']

class HammerThread(threading.Thread):
    def __init__(self,id,reg):
        self.id = id
        self.reg = reg
        self.rng = random.Random()
        self.owned_ids = []
        self.done = False
        super(HammerThread,self).__init__()

    def updown(self):
        print >> sys.stderr,self.id, " shutdown()"
        self.reg.shutdown()
        print >> sys.stderr,self.id, " shutdown() done!"
        self.owned_ids = []
        print >> sys.stderr,self.id, " startup()"
        self.reg.startup()
        print >> sys.stderr,self.id, " startup() done!"
       
    def uindex(self):
        print >> sys.stderr,self.id, " update_index(None)" 
        self.reg.ids()
        print >> sys.stderr,self.id, " update_index(None) done!" 

    def add(self):
        objs = [TestGangaObject("HT%i"%(self.id),2) for i in range(self.rng.randint(1,2))]
        print >> sys.stderr,self.id, " add(%s)"%objs
        ids = [self.reg._add(obj) for obj in objs]
        print >> sys.stderr,self.id, " add(%s) done, ids = %s!"%(objs, ids)
        assert len(ids) == len(objs)
        # TODO: Check if objects stay the same
        self.owned_ids.extend(ids)

    def delete(self):
        n = min(len(self.owned_ids),self.rng.randint(1,2))
        ids = self.rng.sample(self.owned_ids,n)
        print >> sys.stderr,self.id, " delete(%s)"%ids
        [self.reg._remove(self.reg[id]) for id in ids]
        for id in ids:
            assert not id in self.reg._objects
            self.owned_ids.remove(id)
        print >> sys.stderr,self.id, " delete(%s) done!"%ids


    def load(self):
        ids = self.reg.ids()
        if len(ids) == 0:
            return
        id = self.rng.sample(ids,1)[0]
        print >> sys.stderr,self.id, " load(%s)"%id
        try:
            self.reg[id]._getReadAccess()
            assert self.reg[id].name.startswith("HT")
            if id in self.owned_ids:
                assert self.reg[id].name == "HT%i"%(self.id)
        except KeyError: # If the object has been deleted in the meantime, it must be gone from the registry
            assert not id in self.reg
            print >> sys.stderr,self.id, "  %s deleted after KeyError (as per specification)" % id
        print >> sys.stderr,self.id, " load(%s) done!"%id

    def lock(self):
        ids = self.reg.ids()
        if len(ids) == 0:
            return
        id = self.rng.sample(ids,1)[0]
        print >> sys.stderr,self.id, " lock(%s)"%id
        try:
            #self.reg[id]._getWriteAccess()
            assert self.reg[id].name.startswith("HT")
            self.reg[id].name = "HT%i"%(self.id)
            if not id in self.owned_ids:
                self.owned_ids.append(id)
        except KeyError: # If the object has been deleted in the meantime, it must be gone from the registry
            print >> sys.stderr,self.id, "  %s deleted after KeyError (as per specification)" % id
            assert not id in self.reg
        except RegistryLockError: # ok, this is already locked
            print >> sys.stderr,self.id, "  %s was locked..." % id
        print >> sys.stderr,self.id, " lock(%s) done!"%id

    def unlock(self):
        if len(self.owned_ids) == 0:
            return
        id = self.rng.sample(self.owned_ids,1)[0]
        print >> sys.stderr,self.id, " unlock(%s)"%id
        assert self.reg[id].name.startswith("HT")
        self.reg[id].name = "HT-unlocked"
        self.owned_ids.remove(id)
        self.reg._release_lock(self.reg[id])
        print >> sys.stderr,self.id, " unlock(%s) done!"%id


    def run(self):
        for i in range(2000):
            choices = []
            choices.extend([self.updown]*1)
            choices.extend([self.uindex]*1)
            choices.extend([self.add]*10)
            choices.extend([self.delete]*10)
            choices.extend([self.load]*10)
            choices.extend([self.lock]*10)
            choices.extend([self.unlock]*5)
            #choices.extend([self.flush]*2)
            self.rng.choice(choices)()
            if not len(self.owned_ids) == len(dict(zip(self.owned_ids,range(len(self.owned_ids)))).keys()):
                print >> sys.stderr,len(self.owned_ids), len(dict(zip(self.owned_ids,range(len(self.owned_ids)))).keys())
                assert (len(self.owned_ids), len(dict(zip(self.owned_ids,range(len(self.owned_ids)))).keys()))
            for id in self.owned_ids:
                if not id in self.reg._objects:
                    print >> sys.stderr, "LOCKED ID DELETED: ", id
                    assert False
        self.done = True

class TestRegistry(MultipassTest):
    def __init__(self): MultipassTest.__init__(self,2)

    def pass1(self):
        t = TestReg(1)
        while not t.isReadyForCheck():
            pass
        return t.checkTest()

    def pass2(self):
        t = TestReg(1)
        while not t.isReadyForCheck():
            pass
        return t.checkTest()


class TestReg(ICheckTest):
    def __init__(self,id):
        self.id = id
        self.registry = Registry("TestRegistry","TestRegistry")
        self.registry.type = type
        self.registry.location = location
        print >> sys.stderr,id, " startup()"
        self.registry.startup()
        print >> sys.stderr,id, " startup() done!"
        print >> sys.stderr,"RUNNING HAMMERTHREAD #%s on direcory %s" % (id, location)
        self.thread = HammerThread(id,self.registry)
        self.thread.start()

    def isReadyForCheck(self):
        return self.thread.done or not self.thread.isAlive()

    def checkTest(self):
        self.thread.join()
        assert self.thread.done
        print >> sys.stderr,self.id, " shutdown()"
        self.registry.shutdown()
        print >> sys.stderr,self.id, " shutdown() done!"
        pass

    def cleanup(self):
        pass
