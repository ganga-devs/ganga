import sys, glob, os
from Ganga.Utility.Plugin import allPlugins
from Ganga.Utility.logging import getLogger
from Ganga.Utility.Config import getConfig, setConfigOption
from Ganga.Core.GangaRepository import getRegistry
## trying to make sure these are in the GPI rcurrie
from GangaTest.Lib.TestSubmitter import TestSplitter, TestSubmitter
from GangaTest.Lib.TestApplication import TestApplication
from xml.dom import minidom

logger = getLogger()

##We have to determine the Ganga version this way because the PRE always thinks config['System']['GANGA_VERSION'] is GANGA-SVN
this_version=getConfig('System')['GANGA_PYTHONPATH'].split('/')[6]
this_repo=getConfig('Configuration')['gangadir']
this_user=getConfig('Configuration')['user']
excludelist = getConfig('TestingFramework')['SchemaTest_ignore_obj']

logger.error('RUNNING SCHEMA TESTER')
logger.error('Executing Ganga version: ' + this_version)
logger.error('Using repo at: ' + this_repo)

assert len(box) != 0, "The number of objects in the box repository was zero"

#count the number of directories in this_repo from the cnt file
#num_box_obj_dirs = len(glob.glob(this_repo+"/repository/"+this_user+"/LocalXML/6.0/box/0xxx/*.index"))

dir = this_repo+"/repository/"+this_user+"/LocalXML/6.0/box/0xxx/"

num_box_obj_dirs = len([name for name in os.listdir(dir) if os.path.isdir(os.path.join(dir, name))])


classNameDict ={} 
for name in os.listdir(dir):
    try:
        xmldoc = minidom.parse(os.path.join(dir, name,'data'))
        itemlist = xmldoc.getElementsByTagName('class')
        #print len(itemlist)
        className = itemlist[0].attributes['name'].value
        classNameDict[int(name)] = className
        #for s in itemlist:
            #print s.attributes['name'].value
    except:
        pass

counter_file_name = this_repo+"/repository/"+this_user+"/LocalXML/6.0/box/cnt"
logger.info(classNameDict)

f = open(counter_file_name, 'r') 
#read_data should hold a single integer value representing the total number of objects in the box repo.
read_data = f.read()
f.close()

logger.info('##########################################')
logger.info("GangaObjects to ignore: " + str(excludelist))
logger.info("Number of object dirs in repo directory: " + str(num_box_obj_dirs))
logger.info("Number of objects in box: " + str(len(box)))
incompleteClassIDs = box.incomplete_ids()
logger.info("Incomplete box ID(s): " +str(incompleteClassIDs))

tmpIncompleteClassIDs = []
if len(incompleteClassIDs) > 0:
    for num in incompleteClassIDs:
        #logger.error('NUM: ' + str(num))
        logger.info("Incomplete object: " + classNameDict[num])
        #logger.info("Searching for " + str(classNameDict[num]) + " in " + str(excludelist))
        try:
            excludelist.index(classNameDict[num])
            logger.info(classNameDict[num] + " is known to be incompatible with this version of Ganga. Ignoring.")
            #del(classNameDict[num])
            #incompleteClassIDs.remove(num)
        except ValueError:
            logger.info(classNameDict[num] + " was thought to be compatible with this version of Ganga. That's a problem!!!") 
            tmpIncompleteClassIDs.append(num)
            
            

incompleteClassIDs = tmpIncompleteClassIDs

num_incomplete_objs = len(incompleteClassIDs)
classNameList = []
if len(incompleteClassIDs) > 0:
    logger.info("Unexpected incomplete box ID(s): " +str(incompleteClassIDs))
    for num in incompleteClassIDs:
        logger.info("Unexpected incomplete object: " + classNameDict[num])
        classNameList.append(classNameDict[num])
logger.info('##########################################')

assert len(incompleteClassIDs) == 0, "There were some objects " + str(classNameList) + " that (unexpectedly) couldn't be loaded"

box

logger.info(box)
index = 0
exc_counter = 0
for thing in box:
    logger.info('##########################################')
    try:
        b=box[index].__str__()
        logger.info('Box object #' + str(index) + ' read successfully.')
    except Exception as e:
        logger.error('Exception for object #' + str(index) + ' in box.')
        logger.error(box[index])
        logger.error(e)
        exc_counter += 1
    index += 1

assert exc_counter == 0, "We had " + str(exc_counter) + " problem(s) when reading the box objects."
#assert num_box_obj_dirs== len(box), "The number of object directories in the box repository " + str(num_box_obj_dirs) + " in " + this_repo+"/repository/"+this_user+"/LocalXML/6.0/box/0xxx/ didn't match the number of objects available in the GPI (" +str(len(box))+")"
#assert len(box) == int(read_data), "The number of objects in the box repository (" + str(len(box)) + ") didn't match the number found in the repository 'cnt' file (" + str(int(read_data)) + ")"
