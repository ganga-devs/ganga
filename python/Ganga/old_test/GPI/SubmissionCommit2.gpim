# make sure that the job is correctly commited at submit time

import sys
import os,new,types
from GangaTest.Framework.tests import MultipassTest

from Ganga.Utility.logging import getLogger
logger = getLogger(modulename=True)

class SubmissionCommit2(MultipassTest):

    def __init__(self):
        MultipassTest.__init__(self,3)
        self.name = '/tmp/ganga.commit_test2_data.123'
        
    def pass1(self):
        logger.info('PASS 1: create new job')
        jobs.remove()
        j = Job()
        j.application = Executable()
        j.backend = Local()
        logger.info('created job '+str(j.id))
        logger.info(j)
        file(self.name,'w').write(str(-j.id))
        logger.info('saved job id %s to file %s'%(j.id,self.name))
        disableServices()
        reactivate()

    def pass2(self):
        try:
            jobid = int(file(self.name).read())
        except IOError:
            logger.error('failed to open file: '+self.name)
        except ValueError:
            logger.error('failed to read file: '+self.name)
            
        logger.info('PASS 2: modify the job')
        j = jobs(-jobid)
        file(self.name,'w').write(str(j.id))
        j.backend = Batch()
        j.application.exe = 'myexecutable'
        logger.info(j)
        self.check_job(j)
        disableServices()
        reactivate()

    def pass3(self):
        try:
            jobid = int(file(self.name).read())
        except IOError:
            logger.error('failed to open file: '+self.name)
        except ValueError:
            logger.error('failed to read file: '+self.name)
                 
        logger.info('PASS 3: checkout job and compare')
        os.remove(self.name)
        j = jobs(jobid)
        logger.info(j)
        self.check_job(j)
        logger.info('test passed OK')

    def check_job(self,j):
        assert(typename(j.application) == 'Executable')
        assert(j.application.exe == 'myexecutable')
        assert(typename(j.backend) == config.Configuration.Batch)

