from Ganga.Utility.logging import getLogger
logger = getLogger(modulename=True)

from GangaTest.Framework.utils import sleep_until_state
config['Configuration']['resubmitOnlyFailedSubjobs']=False

import datetime

j = Job()

j.submit()

assert sleep_until_state(j, 30, 'completed')

assert j.time.submitted() == j.time.timestamps['submitted']
assert isinstance(j.time.submitted(), datetime.datetime)

logger.info("Job 1/6 done.")

j_comp = Job()
j_comp.application.exe='sleep'
j_comp.application.args=[30]

j_comp.submit()

assert sleep_until_state(j_comp, 30, 'running')
j_comp.kill()
assert sleep_until_state(j_comp, 30, 'killed')
j_comp.resubmit()

assert sleep_until_state(j_comp, 45, 'completed')

assert isinstance(j_comp.time.new(), datetime.datetime)
assert isinstance(j_comp.time.submitting(), datetime.datetime)
assert isinstance(j_comp.time.timestamps['resubmitted'], datetime.datetime)
assert isinstance(j_comp.time.backend_running(), datetime.datetime)
assert isinstance(j_comp.time.backend_final(), datetime.datetime)
assert isinstance(j_comp.time.final(), datetime.datetime)


logger.info("Job 2/6 done")
        
j_fail = Job()


j_fail.application.exe='sleep'

j_fail.application.args='300'

j_fail.submit()

assert sleep_until_state(j_fail, 30, 'running')

j_fail.force_status('failed')

assert sleep_until_state(j_fail, 30, 'failed')

assert isinstance(j_fail.time.new(), datetime.datetime)
assert isinstance(j_fail.time.submitting(), datetime.datetime)
assert isinstance(j_fail.time.submitted(), datetime.datetime)
assert isinstance(j_fail.time.backend_running(), datetime.datetime)
assert isinstance(j_fail.time.final(), datetime.datetime)

logger.info("Job 3/6 done")

#subjobs

j = Job()
j.application.exe='sleep'
j.splitter='ArgSplitter'
j.splitter.args=[[10],[10],[10]]

j.submit()

assert sleep_until_state(j, 120, 'completed')

assert j.time.submitted() == j.time.timestamps['submitted']
assert isinstance(j.time.submitted(), datetime.datetime)

logger.info("Job 4/6 done.")

j_comp = Job()

j_comp.application.exe='sleep'
j_comp.splitter='ArgSplitter'
j_comp.splitter.args=[[30],[30],[30]]

j_comp.submit()
assert sleep_until_state(j_comp, 120, 'running')
j_comp.subjobs.kill()
#j_comp.kill() #was causing test to fail
assert sleep_until_state(j_comp, 120, 'killed')
j_comp.resubmit()

assert sleep_until_state(j_comp, 120, 'completed')

assert isinstance(j_comp.time.new(), datetime.datetime)
assert isinstance(j_comp.time.submitting(), datetime.datetime), "Job %d" %j_comp.id
assert isinstance(j_comp.time.timestamps['resubmitted'], datetime.datetime)
assert isinstance(j_comp.time.backend_running(), datetime.datetime)
assert isinstance(j_comp.time.backend_final(), datetime.datetime)
assert isinstance(j_comp.time.final(), datetime.datetime)


logger.info("Job 5/6 done")

j_fail = Job()

j_fail.splitter='ArgSplitter'
j_fail.splitter.args=[[],[],[]]

j_fail.application.exe='sleep'

j_fail.application.args='60'

j_fail.submit()

j_fail.force_status('failed')

assert sleep_until_state(j_fail, 120, 'failed')

assert isinstance(j_fail.time.new(), datetime.datetime)
assert isinstance(j_fail.time.submitting(), datetime.datetime)
assert isinstance(j_fail.time.submitted(), datetime.datetime)
if 'backend_running' in j_fail.time.timestamps.keys():
    assert isinstance(j_fail.time.backend_running(), datetime.datetime)
else:
    logger.info("'backend_running' not in timestamps.")
assert isinstance(j_fail.time.final(), datetime.datetime)

logger.info("Job 6/6 done")

#end
