#!/usr/bin/env python
"""
Contains the ActionMapping class definition.

@license: Apache License 2.0
"""
"""
Copyright (c) Members of the EGEE Collaboration. 2004.
See http://www.eu-egee.org/partners/ for details on the copyright holders.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.

You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
"""
"""
Dashboard userspace installation script.

Builds on the glite-userspace-rpm script to manage a local dashboard installation from
the rpm packages in userspace, with no need for root access in the machine.

@author: Ricardo Rocha <ricardo.rocha@cern.ch>
"""
import re
import os.path
import shutil
import sys
import urllib
import xml.dom.minidom
from xml import xpath
from optparse import OptionParser

######################################
# Global Variables
"""
The parser object used to load the command line arguments and options.
"""
parser = None
"""
The XML document containing the build file contents.
"""
buildFileDoc = None
"""
The XML document containing the externals file contents.
"""
extFileDoc = None
"""
The options loaded from the command line (as a optparser 'options' object).
"""
options = None
"""
The arguments loaded from the command line (as a list of string).
"""
args = None
"""
The packages (or pattern of packages) considered part of the 'client' set.
"""
clientPackages = ["api", "cli", "dashboard-common", "util-url"]
"""
The packages considered part of the 'client' externals - as tuple (name, version).
"""
extClientPackages = [("pycurl", "7.12.1")]

######################################
# Load the arguments and options passed
parser = OptionParser(usage="Usage: %prog [options] stable|unstable|testing")
parser.add_option("-f", "--full", action="store_true", default=False, 
                  help="Install all packages (default is to install only *api*, *cli*, common)")
parser.add_option("-i", "--install-base", action="store", default="%s/base" % os.getcwd(), type="string",
                  dest="install_base", help="Directory used as base of the installation")
parser.add_option("-b", "--build-pattern", action="store", type="string", dest="build_pattern",
                  default="http://dashboard.cvs.cern.ch/cgi-bin/dashboard.cgi/*checkout*/arda.dashboard/config/build/dashboard-%s.xml?rev=HEAD&content-type=text/xml"),
parser.add_option("-e", "--externals", action="store", type="string", dest="externals",
                  default="http://dashboard.cvs.cern.ch/cgi-bin/dashboard.cgi/arda.dashboard/config/build/dashboard-externals.xml?rev=HEAD&content-type=text/xml",
                  help="The location of the externals build configuration file"),
parser.add_option("-r", "--rpm-pattern", action="store", type="string", dest="rpm_pattern",
                  default="http://dashb-build.cern.ch/apt/RPMS.%s",
                  help="The pattern used to construct the directory holding the rpms")
parser.add_option("-t", "--tmp", action="store", type="string", dest="tmp_dir", default="tmp",
                  help="The directory used for temporary storage")

(options, args) = parser.parse_args()

######################################
# Check input is correct, give error if not
if len(args) != 1 or (args[0] not in ('stable', 'unstable', 'testing')):
    parser.error("Please provide one of stable|unstable|testing")

######################################
# Make sure the tmp directory is empty
if os.path.exists(options.tmp_dir):
    tmpRemovalOk = raw_input("Temporary directory '%s' already exists. Is it ok to overwrite [Y/N]? " % options.tmp_dir).upper()
    while tmpRemovalOk not in ["Y", "N"]:
        tmpRemovalOk = raw_input("Please provide 'Y' or 'N': ").upper()
    if tmpRemovalOk == "N":
        print "Please provide an empty tmp directory location then... nothing was done."
        sys.exit(1)
    shutil.rmtree(options.tmp_dir)

######################################
# Fetch the corresponding build files
buildFileLocation = options.build_pattern % args[0]
extFileLocation = options.externals
try:
    buildFile = urllib.urlopen(buildFileLocation)
    extFile = urllib.urlopen(extFileLocation)
except Exception, exc:
    print >> sys.stderr, "Failed to download build file ::: %s" % exc
    sys.exit(-1)

######################################
# Parse the xml build files
buildFileContent = ""
for line in buildFile.readlines():
    buildFileContent += line
buildFileDoc = xml.dom.minidom.parseString(buildFileContent)
extFileContent = ""
for line in extFile.readlines():
    extFileContent += line
extFileDoc = xml.dom.minidom.parseString(extFileContent)

######################################
# Select and fetch the requested packages

# We need a temporary directory to work with
if not os.path.exists(options.tmp_dir):
    os.mkdir(options.tmp_dir)

# If --full option was given, then we try to install all the packages
if options.full:
    modulesFilter = "/dashboardBuild/modules/module"
# Else we go for only the client packages (api, cli, common, util-url)
else:
    modulesFilter = "/justsomething"
    for package in clientPackages:
        modulesFilter += "|/dashboardBuild/modules/module[contains(@tag, '%s')]" % package

# Fetch each of the selected packages
for module in xpath.Evaluate(modulesFilter, buildFileDoc):
    rpmName = "%s-1.noarch.rpm" % re.sub('(\d)-(\d)-(\d)', '\g<1>.\g<2>.\g<3>', module.getAttribute("tag"))
    rpmLocation = "%s/%s" % (options.rpm_pattern % args[0], rpmName)
    try:
        urllib.urlretrieve(rpmLocation, "tmp/%s" % rpmName)
    except Exception, exc:
        print >> sys.stderr, "Failed to download '%s' ::: %s" % (rpmLocation, exc)

# Fetch each of the external packages
if options.full:
    extFilter = "/dashboardBuild/externals/component[@name='']/release[@version='']"
else:
    extFilter = "/justsomething"
    for package in extClientPackages:
        extFilter += "|/dashboardBuild/externals/component[@name='%s']/release[@version='%s']" % (package[0], package[1])
# Fetch each of the selected packages
for release in xpath.Evaluate(extFilter, extFileDoc):
    rpmLocation = release.getAttribute("uri")
    rpmName = rpmLocation[rpmLocation.rindex("/")+1:]
    if release.getAttribute("uriType") == "local":
        try:
            shutil.copyfile(release.getAttribute("uri"), "tmp/%s" % rpmName)
        except Exception, exc:
            print >> sys.stderr, "Failed to copy '%s' ::: %s" % (rpmLocation, exc)
    else:
        try:
            urllib.urlretrieve(rpmLocation, "tmp/%s" % rpmName)
        except Exception, exc:
            print >> sys.stderr, "Failed to download '%s' ::: %s" % (rpmLocation, exc)

######################################
# Perform the rpm installation
os.system("GLITE_ROOT=%s/%s ./glite-userspace-rpm -Uvh %s/*" % (options.install_base, args[0], options.tmp_dir))

