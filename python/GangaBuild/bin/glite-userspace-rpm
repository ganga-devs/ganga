#!/bin/bash

#
# Copyright (c) Members of the EGEE Collaboration. 2004-2008.
# See http://public.eu-egee.org/partners/ for details on 
# the copyright holders.
# For license conditions see the license file or
# http://eu-egee.org/license.html
#
# Authors: 
#      Akos Frohner <Akos.Frohner@cern.ch>
#
# This script installs an RPM, specified as a parameter, into 
# a userspace directory, specified by the GLITE_ROOT environmental
# variable.
# 
# Apart from creating the necessary files this script is a wrapper
# around RPM, thus any options and parameters applicable to 'rpm'
# can be used here.
#

# uncomment for debugging
#DRYRUN=echo

if [ -z "$GLITE_ROOT" ]; then
    echo "Error: \$GLITE_ROOT is not defined!"
    exit -1
fi

if [ ! -d "$GLITE_ROOT" ]; then
    echo "Info: creating the root at $GLITE_ROOT"
    mkdir -p $GLITE_ROOT
fi

#############################
# basic directories and files

rpmdbdir="$GLITE_ROOT/var/lib/rpm"
rpmlockdir="$GLITE_ROOT/var/lock/rpm"

# In theory one could use the --dbpath or --root
# option of RPM to specify the DB location. In
# practice it is just not working! You have to 
# start hacking with the RPM macros to make it 
# really happen. 
if [ ! -d "$GLITE_ROOT/root" ]; then 
    echo "Info: creating a fake root HOME environment in $GLITE_ROOT/root"
    mkdir -p $GLITE_ROOT/root
fi
if [ ! -d "$GLITE_ROOT/root/.rpmmacros" ]; then 
    echo "%_dbpath        $rpmdbdir" >$GLITE_ROOT/root/.rpmmacros
    echo "%_rpmlock_path  $rpmlockdir/transaction" >>$GLITE_ROOT/root/.rpmmacros
fi
export HOME=$GLITE_ROOT/root

if [ ! -d "$rpmdbdir" ]; then
    echo "Info: initializing the RPM database at $rpmdbdir"
    mkdir -p $rpmdbdir
    mkdir -p $rpmlockdir

    # Initialize the RPM database 
    rpm --initdb
    # which means: ignore dependencies!
    touch $rpmdbdir/.option.nodeps
fi

####################################
# figuring out the extra RPM options

rpm_pre_options=""
rpm_post_options=""

# ignore dependencies, if it is not an RPM based distro
if [ -e $rpmdbdir/.option.nodeps ]; then
    rpm_post_options="$rpm_post_options --nodeps"
fi

# Going through the arguments to check,
#   - if we need to do relocation at all and
#   - what prefixes has to be relocated.
# 
# The '--root' option does not work in our
# case, because the system RPMs are installed
# at a different location.

relocate="false"
relocate_root="false"

if [ ! -d "$GLITE_ROOT/tmp" ]; then
    mkdir -p $GLITE_ROOT/tmp
fi
tempbase="$GLITE_ROOT/tmp/$(basename $0).$$"
trap "$DRYRUN rm -f $tempbase.*" EXIT

# poor man's hashtable
relocatempfile=$tempbase.relocatempfile
touch $relocatempfile
chmod 600 $relocatempfile

function extract_rpm_prefix {
    prefix=$(rpm -qp --qf '%{PREFIXES}' $1)
    if [ "$prefix" = "/usr" ]; then
        # special case for 'system' packages
        echo "--relocate /etc=${GLITE_ROOT}/etc" >>$relocatempfile
        echo "--relocate /var=${GLITE_ROOT}/var" >>$relocatempfile
        echo "--relocate /usr=${GLITE_ROOT}/usr" >>$relocatempfile
        echo "--relocate /opt=${GLITE_ROOT}/opt" >>$relocatempfile

    elif [ "$prefix" = "(none)" -o "$prefix" = "/" ]; then
        echo "Warning: / relocation for "$(basename $1)
        relocate_root="true"
        # by default only these basic directories are relocated instead of /
        echo "--relocate /etc=${GLITE_ROOT}/etc" >>$relocatempfile
        echo "--relocate /var=${GLITE_ROOT}/var" >>$relocatempfile
        echo "--relocate /usr=${GLITE_ROOT}/usr" >>$relocatempfile
        echo "--relocate /opt=${GLITE_ROOT}/opt" >>$relocatempfile

    else
        # the normal case
        echo "--relocate ${prefix}=${GLITE_ROOT}${prefix}" >>$relocatempfile
    fi
}

function scriptlet {
    phase="$1"
    rpmname="$2"
    tempname=$tempbase.$(basename $rpmname)
    rpm -q $rpm_p_option --qf "%{$phase}" $rpmname >$tempname.$phase
    # check if there was a script at all
    if [ "$(head -1 $tempname.$phase)" = "(none)" ]; then
        return 0
    fi
    # generate a sed script, if not exists yet
    if [ ! -r "$tempname.sed" ]; then
        prefix=$(rpm -q $rpm_p_option --qf '%{PREFIXES}' $rpmname)
        sedscript=$tempname.sed
        if [ "$prefix" = "/usr" ]; then
            echo "s#/etc#${GLITE_ROOT}/etc#g" >>$sedscript 
            echo "s#/var#${GLITE_ROOT}/var#g" >>$sedscript
            echo "s#/usr#${GLITE_ROOT}/usr#g" >>$sedscript
            echo "s#/opt#${GLITE_ROOT}/opt#g" >>$sedscript

        elif [ "$prefix" = "(none)" -o "$prefix" = "/" ]; then
            echo "s#/etc#${GLITE_ROOT}/etc#g" >>$sedscript 
            echo "s#/var#${GLITE_ROOT}/var#g" >>$sedscript
            echo "s#/usr#${GLITE_ROOT}/usr#g" >>$sedscript
            echo "s#/opt#${GLITE_ROOT}/opt#g" >>$sedscript

        else
            echo "s#${prefix}#${GLITE_ROOT}${prefix}#g" >>$sedscript 
        fi
    fi
    if [ -r "$tempname.sed" ]; then
        sed -f $tempname.sed -i $tempname.$phase
    fi
    $DRYRUN /bin/sh $tempname.$phase
}

function install_scriptlets {
    phase="$1"
    shift
    rpm_p_option="-p "
    for opt in "$@"; do
        case $opt in
            *.rpm)
                scriptlet $phase $opt
                ;;
            *)
                # apt sometimes passes the RPMs in a list file
                if [ -r "$opt" ]; then
                    for rpm in $(grep '\.rpm$' $opt); do
                        scriptlet $phase $rpm
                    done
                fi
                ;;
        esac
    done
}

function uninstall_scriptlets {
    phase="$1"
    shift
    rpm_p_option=""
    for opt in "$@"; do
        case $opt in
            -*)
                # skip
                ;;
            *)
                if [ "$(rpm -q $opt)" != "package $opt is not installed" ]; then    
                     scriptlet $phase $opt
                fi
                ;;
        esac
    done
}

do_POSTIN="false"
do_PREIN="false"
do_PREUN="false"
do_POSTUN="false"
for opt in "$@"; do
    case $opt in
        -F*|-i*|-U*)
            relocate="true"
            rpm_pre_options="--noscripts "
            do_PREIN="true"
            do_POSTIN="true"
            ;;
        -e*)
            rpm_pre_options="--noscripts "
            do_PREUN="true"
            do_POSTUN="true"
            ;;
        --noscripts)
            do_PREUN="false"
            do_POSTUN="false"
            do_PREIN="false"
            do_POSTIN="false"
            ;;
        *.rpm)
            extract_rpm_prefix $opt
            ;;
        *)
            # apt sometimes passes the RPMs in a list file
            if [ -r "$opt" ]; then
                for rpm in $(grep '\.rpm$' $opt); do
                    extract_rpm_prefix $rpm
                done
            fi
            ;;
    esac
done

if [ -n "$DRYRUN" ]; then 
    echo "Debug: relocate == $relocate, relocate_root == $relocate_root"
    cat $relocatempfile | sed -e 's/^/Debug: /'
    echo "Debug: do_PREIN == $do_PREIN, do_POSTIN == $do_POSTIN"
    echo "Debug: do_PREUN == $do_PREUN, do_POSTUN == $do_POSTUN"
fi

if [ "$relocate" = "true" ]; then
    if [ "$relocate_root" = "true" -a "$GLITE_USERSPACE_ROOT_RELOCATE" = "true" ]; then
        # root directory relocation is not compatible with any
        # other directory relocations, because that would relocate
        # those as well...
        rpm_pre_options="$rpm_pre_options --relocate /=$GLITE_ROOT/"
    else
        # avoiding duplication of relocate options
        rpm_pre_options="$rpm_pre_options "$(sort -u $relocatempfile)
    fi
fi

# trying to fix the preinstall scriptlets
if [ "$do_PREIN" = "true" ]; then
    install_scriptlets PREIN $@
fi
# trying to fix the preuninstall scriptlets
if [ "$do_PREUN" = "true" ]; then
    uninstall_scriptlets PREUN $@
fi

# do the job, by calling RPM itself
echo "Info: rpm" $rpm_pre_options $@ $rpm_post_options
$DRYRUN rpm $rpm_pre_options $@ $rpm_post_options

# trying to fix the postinstall scriptlets
if [ "$do_POSTIN" = "true" ]; then
    install_scriptlets POSTIN $@

    # the post-install scriptlets usually fail to update the lib
    # directories, because they assume to be ran by root
    echo "Info: 'ldconfig -n' for the libraries"
    find $GLITE_ROOT -type d -name lib -print0 | xargs -0 /sbin/ldconfig -n 
fi
# trying to fix the postuninstall scriptlets
if [ "$do_POSTUN" = "true" ]; then
    uninstall_scriptlets POSTUN $@
fi

