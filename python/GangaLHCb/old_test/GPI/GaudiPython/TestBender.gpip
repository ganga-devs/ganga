import os
import os.path
import shutil
import tempfile
from os.path import join
from GangaTest.Framework.tests import GangaGPITestCase, ICheckTest
from GangaTest.Framework.utils import file_contains, is_job_finished, write_file

from GangaLHCb.test import *

import Ganga.Utility.Config.Config
from GangaLHCb.test import *

import Ganga.Utility.Config

ganga_path = os.path.abspath(os.path.dirname(__file__))
pwd = ganga_path + '/../python/GangaLHCb/old_test/GPI/GaudiPython/'
module = '%s/DummyBenderModule.py' % pwd

class TestBender(GangaGPITestCase):

    def testLocal(self):
        global module
        j = Job(application=Bender(), backend=Local())
        j.application.module = module
        j.submit()
        return LocalJob(j)

    def testDirac(self):
        global module
        j = Job(application=Bender(), backend=Dirac())
        j.application.module = module
        j.application.platform = getDiracAppPlatform()
        j.submit()
        return DiracJob(j)

    def testSplit(self):
        global module
        j = Job(application=Bender(), backend=Local())
        j.application.module = module
        j.inputdata = LHCbDataset(['LFN:/lhcb/LHCb/Collision11/DIMUON.DST/00016768/0000/00016768_00000006_1.dimuon.dst','LFN:/lhcb/LHCb/Collision11/DIMUON.DST/00016768/0000/00016768_00000007_1.dimuon.dst'])
        j.splitter = SplitByFiles()
        j.submit()
        return SplitJob(j)


class LocalJob(ICheckTest):

    def isReadyForCheck(self):
        return is_job_finished(self.j)

    def checkTest(self):
        fname = join(self.j.outputdir,'stdout')
        print("fname = %s" % fname)
        f = open(fname)
        print('f =', f.read())
        f.close()
        #executionstring = 'Application Manager Configured successfully'
        executionstring = 'num_events: -1'
        assert file_contains(fname,executionstring),\
               'stdout should contain string: ' + executionstring


class DiracJob(ICheckTest):

    def isReadyForCheck(self):
        return True

    def checkTest(self):
        self.j.remove()
        pass


class SplitJob(ICheckTest):

    def isReadyForCheck(self):
        return is_job_finished(self.j)

    def checkTest(self):
        #executionstring = 'Application Manager Stopped successfully'
        executionstring = 'num_events: -1'
        for js in self.j.subjobs:
            fname = join(js.outputdir,'stdout')
            assert file_contains(fname,executionstring),\
                   'stdout should contain string: ' + executionstring


